import maya.cmds as cmds
#from os import listdir


class AutoRig_Tread():
    def __init__(self):
        self.window = 'Tread Window'
        self.title = 'Tread AutoRig Window'
        self.size = (400, 500)
        
        
        if cmds.window(self.window, exists=True):
            cmds.deleteUI(self.window, window=True)

        confirmVar = cmds.confirmDialog(t="before anything", m="please ensure your model in placed along Z axis",
                                        b=['yes', 'no'], db='yes', cb='no')
        if confirmVar == 'no':
            cmds.confirmDialog(m="then you must reorient your model on Z axis")
            
        if confirmVar == 'yes':
                self.createWindow()
        
    def createWindow(self):
        #winName="TreadBuilder"
        if cmds.window(self.window,q=True,exists=True):
            cmds.deleteUI(self.window)
        '''if cmds.window(self.window, exists=True):
            cmds.deleteUI(self.window, window=True)'''

        self.window = cmds.window(self.window, title=self.title, widthHeight=self.size, sizeable=False)

        self.mainForm = cmds.formLayout(numberOfDivisions=120);

        self.titleDisplay = cmds.text(label=self.title, align="center", font='boldLabelFont')
        cmds.formLayout(self.mainForm, edit=True, attachForm=([self.titleDisplay, 'top', 5],
                                                              [self.titleDisplay, 'left', 5],
                                                              [self.titleDisplay, 'right', 5]))

        self.titleSeparator = cmds.separator();
        cmds.formLayout(self.mainForm, edit=True, attachControl=[self.titleSeparator, 'top', 10, self.titleDisplay],
                        attachForm=([self.titleSeparator, 'left', 5],
                                    [self.titleSeparator, 'right', 5]))
        
        self.btnInitialize = cmds.button(label='Place Locators', height=30, width=150, command=self.initFunc)
        cmds.formLayout(self.mainForm, edit=True, attachControl=[self.btnInitialize, 'top', 20, self.titleSeparator],
                        attachForm=[self.btnInitialize, 'left', 5])

        self.btnReset = cmds.button(label='Reset', height=30, width=150, command=self.resetLoc, en=False)
        cmds.formLayout(self.mainForm, edit=True, attachControl=[self.btnReset, 'top', 20, self.btnInitialize],
                        attachForm=[self.btnReset, 'left', 5])
                        
        self.btnMakeCurve = cmds.button(label='Make Curve', height=30, width=150, command=self.makeCurve, en=False)
        cmds.formLayout(self.mainForm, edit=True, attachControl=([self.btnMakeCurve, 'left', 20, self.btnInitialize],
                                                                [self.btnMakeCurve, 'top', 20, self.titleSeparator]),
                        attachForm=[self.btnMakeCurve, 'left', 5])

        
        self.ObjText = cmds.textFieldButtonGrp(bl="Pick Tread OBJ", bc=self.PickingObj, ed=False)
        cmds.formLayout(self.mainForm, edit=True, attachControl=[self.ObjText, 'top', 20, self.btnReset],
                        attachForm=[self.ObjText, 'left', 5])

        
        self.CopyNum = cmds.intSliderGrp(min=10, max=500, v=35, f=True, cc=self.numChange)
        cmds.formLayout(self.mainForm, edit=True, attachControl=[self.CopyNum, 'top', 20, self.ObjText],
                        attachForm=[self.CopyNum, 'left', 5])

        self.SaveTread = cmds.button(l="Save Tread", c=self.SaveTread, en=False)
        cmds.formLayout(self.mainForm, edit=True, attachControl=[self.SaveTread, 'top', 20, self.CopyNum],
                        attachForm=[self.SaveTread, 'left', 5])


        cmds.setParent("..")
        cmds.showWindow()
        
    def initFunc(self, *args):  # this function initializes the process by dumping two locators for the user
        self.frontLocator = cmds.spaceLocator(n="CircleLocFront")
        cmds.scale(5, 5, 5)
        cmds.move(0, 0, 10, r=True)
        self.backLocator = cmds.spaceLocator(n="CircleLocBack")
        cmds.scale(5, 5, 5)
        cmds.confirmDialog(m="you now have two locators. place them where you want according to your model need")
        cmds.button(self.btnInitialize, edit=True, en=False)
        cmds.button(self.btnReset, edit=True, en=True)
        cmds.button(self.btnMakeCurve, edit=True, en=True)

    

        
    def makeCurve(self, *args):  # this function creates curve based one the two locators
        cmds.select(self.frontLocator)
        FrontLocPos = cmds.getAttr(".translateZ")
        cmds.select(self.backLocator)
        BackLocPos = cmds.getAttr(".translateZ")
        print (FrontLocPos)
        print (BackLocPos)
        LocDistance = abs(FrontLocPos - BackLocPos)
        print ("the total distance is: %s" % LocDistance)
        curveRadius = LocDistance / 2
        
        self.treadCurve = cmds.circle(n="TreadCurve", r=curveRadius, nr=(1, 0, 0))
        cmds.group(self.frontLocator, self.backLocator, n="locGroup")
        cmds.select(self.treadCurve, r=True)
        cmds.select("locGroup", add=True)
        cmds.align(z="mid", atl=True)
        cmds.select(self.treadCurve)
        cmds.FreezeTransformations()

        cmds.intSliderGrp(self.CopyNum, edit=True, en=True)
        cmds.button(self.SaveTread, edit=True, en=True)
        
        
    def resetLoc(self, *args):  # this function deletes the two locator created
        #Ana
        if cmds.objExists(self.frontLocator[0]):
            cmds.delete(self.frontLocator)
        
        if cmds.objExists(self.backLocator[0]):
            cmds.delete(self.backLocator)
        
        '''if cmds.circle(treadCircle, exist=True):
            cmds.delete()'''
        '''if self.treadCurve:
            cmds.delete(self.treadCurve)'''
        #cmds.delete(self.treadCurve)
        if cmds.objExists("locGroup"):
            cmds.delete("locGroup")
        #cmds.delete("locGroup")
        #Ana
        cmds.button(self.btnInitialize, edit=True, en=True)
        cmds.button(self.btnReset, edit=True, en=False)
        cmds.button(self.btnMakeCurve, edit=True, en=False)        
    
        
    def PickingObj(self, *args):  # this function identifies the tread object
        global selectedOBJ
        selectedOBJ = cmds.ls(sl=True, o=True)
        print (selectedOBJ[0])
        cmds.textFieldButtonGrp(self.ObjText, e=True, tx=selectedOBJ[0])
        return selectedOBJ


    def numChange(self, *args):  # this function sends out the numebr of copy set by the user
        if cmds.objExists("TreadFull"):
            cmds.delete("TreadFull")
        if cmds.objExists("_wire"):
            cmds.delete("_wire")

        global updateCopyNum
        updateCopyNum = cmds.intSliderGrp(self.CopyNum, query=True, v=True)
        print (updateCopyNum)
        # animating the picked obj around the path
        cmds.select(selectedOBJ, r=True)
        cmds.select(self.treadCurve, add=True)
        cmds.pathAnimation(f=True, fa="z", ua="y", wut="vector", wu=(0, 1, 0), inverseFront=False, iu=False, b=False, stu=1,
                           etu=updateCopyNum)
        cmds.select(selectedOBJ, r=True)
        cmds.selectKey("motionPath1_uValue", time=(1, updateCopyNum))
        cmds.keyTangent(itt="linear", ott="linear")
        cmds.snapshot(n="TreadSS", i=1, ch=False, st=1, et=updateCopyNum, u="animCurve")
        cmds.DeleteMotionPaths()
        # now we combine all duplicated and delete the Sanpshot
        cmds.select("TreadSSGroup", r=True)
        cmds.polyUnite(n="TreadFull", ch=False)
        cmds.select("TreadSSGroup", r=True)
        cmds.delete()

        def createWireD(geo, wireCRV, dropoffDist=40):
            wire = cmds.wire(geo, w=wireCRV, n="_wire")
            wirenode = wire[0]
            cmds.setAttr(wirenode + ".dropoffDistance[0]", dropoffDist)

        cmds.select("TreadFull")
        wireObj = cmds.ls(sl=True, o=True)[0]
        cmds.select(self.treadCurve)
        wirecurve = cmds.ls(sl=True, o=True)[0]
        createWireD(wireObj, wirecurve)

        return updateCopyNum

    def SaveTread(self, *args):  # This function saves the created tread
        cmds.promptDialog(m="Please type a name for your Tread", t="Tread Name", b="ok")
        TreadName = cmds.promptDialog(q=True, text=True)
        print(TreadName)
        cmds.select("TreadCurve", r=True)
        cmds.rename(TreadName + "CurveFinal")
        cmds.select("TreadFull", r=True)
        cmds.CenterPivot()
        cmds.rename(TreadName + "FullFinal")
        cmds.select("TreadCurveBaseWire", r=True)
        cmds.rename(TreadName + "BaseWireFinal")
        cmds.select(TreadName + "CurveFinal", TreadName + "FullFinal", TreadName + "BaseWireFinal", r=True)
        cmds.group()
        cmds.rename(TreadName + "TreadGrp")
        cmds.select(selectedOBJ, r=True)
        cmds.move(0, 0, 0, os=True)
        cmds.FreezeTransformations()
        resetLoc()

AutoRig_Tread()