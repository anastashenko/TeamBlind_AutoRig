import maya.cmds as cmds


#creating a class for the tread Autorig
class AutoRig_Tread(object):
    
    #initializing the UI so it is working smoothier with variables for buttons   
    def __init__(self):
        #defining the title and size for the window
        self.title = 'Tread AutoRig Window'
        self.size = (400, 500)
        #creating a pop-up dialog for the user to make sure the object is on Z Axis
        confirmVar = cmds.confirmDialog(t="before anything", m="please ensure your model in placed along Z axis",
                                        b=['yes', 'no'], db='yes', cb='no')
        if confirmVar == 'no':
            cmds.confirmDialog(m="then you must reorient your model on Z axis")
        #creating a window    
        else:
            winName="TreadBuilder"
            if cmds.window(winName,q=True,exists=True):
                cmds.deleteUI(winName)
    
            window = cmds.window(winName, title=self.title, widthHeight=self.size, sizeable=False)
    
            self.mainForm = cmds.formLayout(numberOfDivisions=120);
    
            self.titleDisplay = cmds.text(label=self.title, align="center", font='boldLabelFont')
            cmds.formLayout(self.mainForm, edit=True, attachForm=([self.titleDisplay, 'top', 5],
                                                                  [self.titleDisplay, 'left', 5],
                                                                  [self.titleDisplay, 'right', 5]))
    
            self.titleSeparator = cmds.separator();
            cmds.formLayout(self.mainForm, edit=True, attachControl=[self.titleSeparator, 'top', 10, self.titleDisplay],
                            attachForm=([self.titleSeparator, 'left', 5],
                                        [self.titleSeparator, 'right', 5]))
            
            self.btnInitialize = cmds.button(label='Place Locators', height=30, width=150, command=self.initFunc)
            cmds.formLayout(self.mainForm, edit=True, attachControl=[self.btnInitialize, 'top', 20, self.titleSeparator],
                            attachForm=[self.btnInitialize, 'left', 5])
    
            self.btnReset = cmds.button(label='Reset', height=30, width=150, command=self.resetLoc, en=False)
            cmds.formLayout(self.mainForm, edit=True, attachControl=[self.btnReset, 'top', 20, self.btnInitialize],
                            attachForm=[self.btnReset, 'left', 5])
                            
            self.btnMakeCurve = cmds.button(label='Make Curve', height=30, width=150, command=self.makeCurve, en=False)
            cmds.formLayout(self.mainForm, edit=True, attachControl=([self.btnMakeCurve, 'left', 20, self.btnInitialize],
                                                                    [self.btnMakeCurve, 'top', 20, self.titleSeparator]),
                            attachForm=[self.btnMakeCurve, 'left', 5])
    
            
            self.ObjText = cmds.textFieldButtonGrp(bl="Pick Tread OBJ", bc=self.PickingObj, ed=False,en=False)
            cmds.formLayout(self.mainForm, edit=True, attachControl=[self.ObjText, 'top', 20, self.btnReset],
                            attachForm=[self.ObjText, 'left', 5])
    
            
            self.CopyNum = cmds.intSliderGrp(min=10, max=500, v=35, f=True, cc=self.numChange,en=False)
            cmds.formLayout(self.mainForm, edit=True, attachControl=[self.CopyNum, 'top', 20, self.ObjText],
                            attachForm=[self.CopyNum, 'left', 5])
    
            self.SaveTread = cmds.button(l="Save Tread", c=self.SaveTreadFunc, en=False)
            cmds.formLayout(self.mainForm, edit=True, attachControl=[self.SaveTread, 'top', 20, self.CopyNum],
                            attachForm=[self.SaveTread, 'left', 5])
            
            self.MakeCTRL = cmds.button(l="Make Control for Tread", c=self.makeControl, en=False)
            cmds.formLayout(self.mainForm, edit=True, attachControl=[self.MakeCTRL, 'top', 20, self.SaveTread],
                            attachForm=[self.MakeCTRL, 'left', 5])

    
            cmds.setParent("..")
            cmds.showWindow()
    
    
    #start of all functions    
    def initFunc(self, *args):  # this function initializes the process by dumping two locators for the user
        self.frontLocator = cmds.spaceLocator(n="CircleLocFront")
        cmds.scale(5, 5, 5)
        cmds.move(0, 0, 10, r=True)
        self.backLocator = cmds.spaceLocator(n="CircleLocBack")
        cmds.scale(5, 5, 5)
        cmds.confirmDialog(m="you now have two locators. place them where you want according to your model need")
        cmds.button(self.btnInitialize, edit=True, en=False)
        cmds.button(self.btnReset, edit=True, en=True)
        cmds.button(self.btnMakeCurve, edit=True, en=True)
        cmds.button(self.MakeCTRL, edit=True, en=False) 

        
    def makeCurve(self, *args):  # this function creates curve based one the two locators
        cmds.select(self.frontLocator)
        FrontLocPos = cmds.getAttr(".translateZ")
        cmds.select(self.backLocator)
        BackLocPos = cmds.getAttr(".translateZ")
        LocDistance = abs(FrontLocPos - BackLocPos)
        self.curveRadius = LocDistance / 2
        self.treadCurve = cmds.circle(n="TreadCurve", r=self.curveRadius, nr=(1, 0, 0))
        self.locGroup = cmds.group(self.frontLocator, self.backLocator, n="locGroup")
        cmds.select(self.treadCurve, r=True)
        cmds.select("locGroup", add=True)
        cmds.align(z="mid", atl=True)
        cmds.select(self.treadCurve)
        cmds.FreezeTransformations()
        cmds.textFieldButtonGrp(self.ObjText,edit=True,en=True)
        cmds.intSliderGrp(self.CopyNum, edit=True, en=True)

            
    def resetLoc(self, *args):  # this function deletes the two locator created
        cmds.button(self.btnInitialize, edit=True, en=True)
        cmds.button(self.btnReset, edit=True, en=False)
        cmds.button(self.btnMakeCurve, edit=True, en=False)        
        cmds.textFieldButtonGrp(self.ObjText,edit=True,en=False)
        cmds.intSliderGrp(self.CopyNum, edit=True, en=False)
        cmds.button(self.SaveTread, edit=True, en=False)
        cmds.button(self.MakeCTRL, edit=True, en=False)
        
        
        #making sure if these objects exist so it deletes it only if it exists
        if cmds.objExists(self.frontLocator[0]):
            cmds.delete(self.frontLocator)
        if cmds.objExists(self.backLocator[0]):
            cmds.delete(self.backLocator)
        if cmds.objExists(self.locGroup):
            cmds.delete(self.locGroup)
        if cmds.objExists(self.treadCurve[0]):
            cmds.delete(self.treadCurve)
        if cmds.objExists(treadFullGeo[0]):
            cmds.delete(treadFullGeo)
        if cmds.objExists(str(selectedOBJ)):
            cmds.select(selectedOBJ,r=True)
            cmds.move(0,0,0, os=True)
    
            
    def PickingObj(self, *args):  # this function identifies the tread object
        global selectedOBJ
        selectedOBJ = cmds.ls(sl=True, o=True)
        cmds.textFieldButtonGrp(self.ObjText, e=True, tx=selectedOBJ[0])
        return selectedOBJ


    def numChange(self, *args):  # this function sends out the numebr of copy set by the user
        if cmds.objExists("TreadFull"):
            cmds.delete("TreadFull")
        if cmds.objExists("_wire"):
            cmds.delete("_wire")

        global updateCopyNum
        updateCopyNum = cmds.intSliderGrp(self.CopyNum, query=True, v=True)
        # animating the picked obj around the path
        cmds.select(selectedOBJ, r=True)
        cmds.select(self.treadCurve, add=True)
        cmds.pathAnimation(f=True, fa="z", ua="y", wut="vector", wu=(0, 1, 0), inverseFront=False, iu=False, b=False, stu=1,
                           etu=updateCopyNum)
        cmds.select(selectedOBJ, r=True)
        cmds.selectKey("motionPath1_uValue", time=(1, updateCopyNum))
        cmds.keyTangent(itt="linear", ott="linear")
        cmds.snapshot(n="TreadSS", i=1, ch=False, st=1, et=updateCopyNum, u="animCurve")
        cmds.DeleteMotionPaths()
        #now we combine all duplicated and delete the Sanpshot
        cmds.select("TreadSSGroup", r=True)
        
        #making geo of the tread global for reset option 
        global treadFullGeo
        
        treadFullGeo = cmds.polyUnite(n="TreadFull", ch=False)       
        cmds.select("TreadSSGroup", r=True)
        cmds.delete()
        cmds.button(self.SaveTread, edit=True, en=True)

        #creating a wire deformer
        def createWireD(geo, wireCRV, dropoffDist=40):
            wire = cmds.wire(geo, w=wireCRV)
            wirenode = wire[0]
            cmds.setAttr(wirenode + ".dropoffDistance[0]", dropoffDist)

        cmds.select("TreadFull")
        wireObj = cmds.ls(sl=True, o=True)[0]
        cmds.select(self.treadCurve)
        wirecurve = cmds.ls(sl=True, o=True)[0]
        createWireD(wireObj, wirecurve)
        return treadFullGeo
        return updateCopyNum


    def SaveTreadFunc(self, *args): #This function saves the created tread 
        #giving the user an option for renaming the created tread
        UserTreadName = cmds.promptDialog(m="Please type a name for your Tread", t="Tread Name",b=['yes'], db='yes')
        self.TreadName=cmds.promptDialog(q=True,text=True)
        if UserTreadName == "yes":
            cmds.select("TreadCurve",r=True)
            cmds.rename(self.TreadName+"CurveFinal")
            cmds.select("TreadFull",r=True)
            cmds.CenterPivot()
            cmds.rename(self.TreadName+"FullFinal")
            cmds.select("TreadCurveBaseWire",r=True)
            cmds.rename(self.TreadName+"BaseWireFinal")
            cmds.select(self.TreadName+"CurveFinal",self.TreadName+"FullFinal",self.TreadName+"BaseWireFinal",r=True)
            cmds.group()
            cmds.rename(self.TreadName+"TreadGrp")
            cmds.select(selectedOBJ,r=True)
            cmds.move(0,0,0, os=True)
            cmds.FreezeTransformations()
            cmds.button(self.SaveTread, edit=True, en=False)
            cmds.button(self.MakeCTRL, edit=True, en=True)
            cmds.button(self.btnInitialize, edit=True, en=True)
            cmds.button(self.btnReset, edit=True, en=False)
            cmds.button(self.btnMakeCurve, edit=True, en=False)        
            cmds.textFieldButtonGrp(self.ObjText,edit=True,en=False)
            cmds.intSliderGrp(self.CopyNum, edit=True, en=False)
            cmds.delete([self.frontLocator[0],self.backLocator[0]])
            if cmds.objExists(self.locGroup):
                cmds.delete(self.locGroup)
        else:
            pass
    def makeControl(self, *args):  # this function will make the control for existing tread
        treadCtrl=cmds.circle(n=self.TreadName+"treadCtrl",r=self.curveRadius*1.5,nr=(1,0,0))
        cmds.select(treadCtrl)
        cmds.group()
        cmds.rename(self.TreadName+"treadCtrlGrp")
        cmds.select(self.TreadName+"treadCtrlGrp")
        cmds.select(self.TreadName+"CurveFinal",add=True)
        cmds.align(z="mid", atl=True)
        cmds.select(self.TreadName+"treadCtrlGrp",r=True)
        cmds.move(5,0,0,r=True)
        cmds.select(treadCtrl,r=True)
        cmds.select(self.TreadName+"FullFinal")
        cmds.orientConstraint(treadCtrl,self.TreadName+"FullFinal",o=[0,0,0],sk=["y","z"])
        self.resetLoc()

AutoRig_Tread()
